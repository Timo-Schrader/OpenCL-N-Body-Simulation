cmake_minimum_required (VERSION 3.16)
project (N-Body-Simulation)
set(CMAKE_CXX_STANDARD 17)
add_compile_options(-w)
if (UNIX)
    message("Compiling for Linux")
    find_package(GLUT)
    find_package(GLEW)
    find_package(Boost REQUIRED COMPONENTS program_options)
    find_package(OpenMP)
    if(DEFINED ENABLE_OPENMP)
        if(OPENMP_FOUND AND ${ENABLE_OPENMP})
            message(NOTICE "Compiling with OpenMP enabled!")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        endif()
    endif()
    if(DEFINED ENABLE_SIMD)
        if(${ENABLE_SIMD})
            message(NOTICE "Compiling with SIMD enabled!")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DENABLE_SIMD")
        endif()
    endif()
    set(BOOST_INC "/usr/include/boost")
    set(BOOST_LIB "/usr/lib/x86_64-linux-gnu/")
elseif(WIN32)
    message("Compiling for Windows")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(NOTICE "Compiler: Clang")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(NOTICE "Compiler: MSVC")
    endif()
    message(NOTICE "Make sure that freeglut.dll and glew32.dll are located in your system path!")
    set (GLUT_INCLUDE_DIRS "C:/lib/glut/include/")
    set (GLUT_LIBRARY "C:/lib/glut/lib/freeglut.lib")
    set (GLEW_INCLUDE_DIRS "C:/lib/glew-2.1.0/include")
    set (GLEW_LIBRARY "C:/lib/glew-2.1.0/lib/Release/x64/glew32.lib")
    set(BOOST_INC "C:/lib/boost_1_79_0/")
    set(BOOST_LIB "C:/lib/boost_1_79_0/lib64-msvc-14.3/")
    find_package(OpenMP)
    if(DEFINED ENABLE_OPENMP)
        if(${OpenMP_FOUND} AND ${ENABLE_OPENMP})
            message(NOTICE "Compiling with OpenMP enabled!")
            if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -openmp:llvm")
            endif()
        endif()
    endif()
    if(DEFINED ENABLE_SIMD)
        if(${ENABLE_SIMD})
            message(NOTICE "Compiling with SIMD enabled!")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DENABLE_SIMD")
        endif()
    endif()
    if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
        if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            set(BOOST_FILESYSTEM_LIB "C:/lib/boost_1_79_0/lib-clang/libboost_filesystem-clangw13-mt-x64-1_79.lib")
            set(BOOST_PROGRAM_OPTIONS_LIB "C:/lib/boost_1_79_0/lib-clang/libboost_program_options-clangw13-mt-x64-1_79.lib")
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
            set(BOOST_FILESYSTEM_LIB "C:/lib/boost_1_79_0/lib64-msvc-14.3/libboost_filesystem-vc143-mt-x64-1_79.lib")
            set(BOOST_PROGRAM_OPTIONS_LIB "C:/lib/boost_1_79_0/lib64-msvc-14.3/libboost_program_options-vc143-mt-x64-1_79.lib")
        endif()
    elseif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            set(BOOST_FILESYSTEM_LIB "C:/lib/boost_1_79_0/lib-clang/libboost_filesystem-clangw13-mt-gd-x64-1_79.lib")
            set(BOOST_PROGRAM_OPTIONS_LIB "C:/lib/boost_1_79_0/lib-clang/libboost_program_options-clangw13-mt-gd-x64-1_79.lib")
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
            set(BOOST_FILESYSTEM_LIB "C:/lib/boost_1_79_0/lib64-msvc-14.3/libboost_filesystem-vc143-mt-gd-x64-1_79.lib")
            set(BOOST_PROGRAM_OPTIONS_LIB "C:/lib/boost_1_79_0/lib64-msvc-14.3/libboost_program_options-vc143-mt-gd-x64-1_79.lib")
        endif()
    else()
        message(FATAL_ERROR "Make sure to specify the CMake Build Type in your IDE when using MSVC!")
    endif()
else()
    message(FATAL_ERROR "OS is currently not supported!")
endif()

find_package(OpenCL REQUIRED)
find_package(OpenGL REQUIRED)

file (GLOB CORE_SRC "${CMAKE_CURRENT_SOURCE_DIR}/lib/Core/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/lib/Core/*.c")
file (GLOB OPENCL_SRC "${CMAKE_CURRENT_SOURCE_DIR}/lib/OpenCL/*.c" "${CMAKE_CURRENT_SOURCE_DIR}/lib/OpenCL/*.cpp")

set(OPENCL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/OpenCL")
set(CORE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/Core")

file(GLOB SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
file(GLOB DATA_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/src/Data/*.cpp")
file(GLOB RENDER_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/src/Render/*.cpp")
file(GLOB SIM_CALC_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/src/Simulation/*.cpp")
file(GLOB PERFORMANCE_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/src/PerformanceMetrics/*.cpp")

if(UNIX)
    add_executable(N-Body-Simulation ${SOURCES} ${OPENCL_SRC} ${CORE_SRC} ${DATA_SOURCE} ${RENDER_SOURCE} ${SIM_CALC_SOURCE} ${PERFORMANCE_SOURCE})
    target_include_directories(N-Body-Simulation PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib" "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/include/Data" "${CMAKE_CURRENT_SOURCE_DIR}/include/Simulation" "${CMAKE_CURRENT_SOURCE_DIR}/include/glm"  ${OPENCL_PATH} ${CORE_PATH} ${Boost_INCLUDE_DIR} ${OpenMP_CXX_INCLUDE_DIRS})
    target_link_libraries(N-Body-Simulation ${OpenCL_LIBRARY} ${CMAKE_DL_LIBS} ${Boost_LIBRARIES} ${GLUT_LIBRARIES} ${GLEW_LIBRARIES} ${OPENGL_LIBRARIES} ${OpenMP_CXX_LIBRARIES})
elseif(WIN32)
    add_executable(N-Body-Simulation ${SOURCES} ${OPENCL_SRC} ${CORE_SRC} ${DATA_SOURCE} ${RENDER_SOURCE} ${SIM_CALC_SOURCE} ${PERFORMANCE_SOURCE})
    if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        target_compile_definitions(N-Body-Simulation PUBLIC NDEBUG)
    endif()
    target_include_directories(N-Body-Simulation PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/lib" ${OPENCL_PATH} ${CORE_PATH} ${BOOST_INC} ${OpenCL_INCLUDE_DIRS} ${GLUT_INCLUDE_DIRS} ${GLEW_INCLUDE_DIRS})
    target_link_libraries(N-Body-Simulation ${OpenCL_LIBRARY} ${CMAKE_DL_LIBS} ${Boost_LIBRARIES} ${BOOST_FILESYSTEM_LIB} ${BOOST_PROGRAM_OPTIONS_LIB} ${IMAGE_HLP_LIB} ${GLUT_LIBRARY} ${GLEW_LIBRARY} "imagehlp")
endif()